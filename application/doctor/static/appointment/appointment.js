$(function () {
  $(".datepicker").datepicker({
    autoclose: true,
    changeMonth: true,
    changeYear: true,
    format: "mm/dd/yyyy",
    startDate: "+1d",
  });

  $(".timepicker").timepicker({
    step: 30,
    minTime: "8am",
    maxTime: "5pm",
    defaultTime: "08",
    forceRoundTime: true,
    timeFormat: "h:i A",
    scrollbar: false,
  });

  let doctorID = localStorage.getItem("id");
  let appointments = [];
  let patients = [];
  let searchParams = $.param({
    sortKey: "createdDate",
    sortDirection: -1,
    // limit: 5,
  }); // TO SORT THE TABLE BY LATEST CREATED DATE
  let nameFilter = "";
  let statusFilter = "";
  let selectedAppointmentID = "";
  fetchDoctorAppointments(doctorID, searchParams)
    .then(function (response) {
      let data = response;

      console.log(data);
      let appointmentsTableBody = $(".appointments-table tbody");

      let pending = 0;
      let accepted = 0;
      let completed = 0;
      data.forEach(function (item) {
        // item["patient_id"] = doctorID;
        appointments.push(item);
        // TO SHOW APPOINTMENTS WITH STATUS OF PENDING
        if (item["status"] === "pending") {
          pending++;
        } else if (item["status"] === "accepted") {
          accepted++;
        }
        let tr = generateAppointmentTrs(item);
        appointmentsTableBody.append(tr);

        // UPDATE APPOINTMENT SUMMARY CARD
        $(".appointment-summary-card[id=pending] p").text(pending);
        $(".appointment-summary-card[id=accepted] p").text(accepted);
        $(".appointment-summary-card[id=completed] p").text(completed);
      });
    })
    .catch(function (xhr) {
      console.log(xhr);
    });

  fetchPatients(doctorID)
    .then(function (response) {
      console.log(response);
      let data = response;
      data.forEach(function (item) {
        let patient = {
          _id: item._id,
          name: item.basicInformation.name,
          lastVisitDate: item.recentVisit,
          mobile: item.basicInformation.mobile,
          monitoringStatus: item.status,
        };
        patients.push(patient);
      });
    })
    .catch(function (xhr) {
      console.log(xhr);
    });

  $(".appointments-table").on(
    "click",
    "#reject-appointment-btn, #accept-appointment-btn, #cancel-appointment-btn",
    function () {
      selectedAppointmentID = $(this).attr("data-appointment-id");

      let selectedAppointment = appointments.filter(
        (appt) => appt._id === selectedAppointmentID
      )[0];

      console.log(selectedAppointment);
    }
  );

  $("#follow-up-datepicker").on("keydown", function (e) {
    if (e.keyCode == 8 || e.keyCode == 46) {
      $(this).val("");
      $(this).trigger("change");
    }
    e.preventDefault();
  });

  $("#follow-up-time").on("keydown", function (e) {
    e.preventDefault();
  });

  $("#follow-up-datepicker").on("change", function () {
    console.log("CHANGED");
    if ($(this).val() != "") {
      $("#follow-up-time").timepicker("setTime", "8");
      $("#follow-up-time").prop("disabled", false);
      return;
    }
    $("#follow-up-time").val("");
    $("#follow-up-time").prop("disabled", true);
  });

  // WHEN THE USER ACCEPTS THE APPOINTMENT
  $("#confirm-accept-appointment-btn").on("click", function () {
    console.log("accepted!!!");

    let selectedAppointment = appointments.filter(
      (appt) => appt._id == selectedAppointmentID
    )[0];

    editAppointment(selectedAppointmentID, {
      status: "accepted",
      additionalInfo: {},
    });

    queueSMS(
      selectedAppointment._id,
      selectedAppointment.doctor_id,
      selectedAppointment.patient_id,
      selectedAppointment.patient_name,
      selectedAppointment.appointmentDate
    )
      .then(function (response) {
        console.log(response);
      })
      .catch(function (xhr) {
        console.log(xhr);
      });
  });

  // WHEN THE USER REJECTS THE APPOINTMENT
  $("#confirm-reject-appointment-btn").on("click", function (e) {
    e.preventDefault();
    console.log("rejected!!!");

    let note = $("#rejectionReason").val();

    let followUpDateVal = $("#follow-up-datepicker").val();
    let followUpTimeVal = $("#follow-up-time").val();

    if (followUpDateVal && followUpTimeVal) {
      let followUpDateTime = new Date(
        `${followUpDateVal} ${followUpTimeVal}`
      ).toISOString();

      let selectedAppointment = appointments.filter(
        (appt) => appt._id === selectedAppointmentID
      )[0];

      console.log(selectedAppointment);

      let newAppointment = {
        patient_id: selectedAppointment.patient_id,
        doctor_id: selectedAppointment.doctor_id,
        appointmentDate: followUpDateTime,
      };

      console.log(newAppointment);

      createFollowUpAppointment(newAppointment)
        .then(function (response) {
          let { _id } = response;

          let payload = {
            status: "accepted",
            additionalInfo: {
              note: "AUTOGENERATED: Pre-approved follow-up appointment.",
            },
          };

          preApproveAppointment(_id, payload)
            .then(function (_) {
              queueSMS(
                _id,
                selectedAppointment.doctor_id,
                selectedAppointment.patient_id,
                selectedAppointment.patient_name,
                followUpDateTime
              )
                .then(function (_) {
                  editAppointment(selectedAppointmentID, {
                    status: "rejected",
                    additionalInfo: {
                      note: note,
                      modifierID: doctorID,
                    },
                  });
                })
                .catch(function (xhr) {
                  console.log(xhr);
                });
              console.log(_id);
            })
            .catch(function (xhr) {
              console.log(xhr);
            });
        })
        .catch(function (xhr) {
          console.log(xhr);
        });
    } else {
      editAppointment(selectedAppointmentID, {
        status: "rejected",
        additionalInfo: {
          note: note,
          modifierID: doctorID,
        },
      });
    }
  });

  // WHEN THE USER CANCELS THE APPOINTMENT
  $("#confirm-cancel-appointment-btn").on("click", function () {
    console.log("cancelled!!!");

    let note = $("#cancelReason").val();
    editAppointment(selectedAppointmentID, { status: "cancelled", note: note });

    editAppointment(selectedAppointmentID, {
      status: "canceled",
      additionalInfo: {
        note: note,
        modifierID: doctorID,
      },
    });
  });

  // WHEN THE USER TRIES TO VIEW THE REJECTED APPOINTMENT
  $(".appointments-table").on("click", ".view-rejection-details", function () {
    selectedAppointmentID = $(this).attr("data-appointment-id");
    let selectedAppointment = {};
    let status = $(this).attr("data-appointment-status");

    appointments.forEach(function (item) {
      if (item._id === selectedAppointmentID) {
        selectedAppointment = { ...item };
      }
    });

    viewAppointmentSummaryModal(selectedAppointment, status);
  });

  // FOR FILTERING
  $("#search").on("keyup", function () {
    let value = $(this).val().toLowerCase();
    nameFilter = value;
    filterTable(appointments, nameFilter, statusFilter);
  });

  $("#sortSelect").on("change", function () {
    let value = $(this).val().toLowerCase();
    statusFilter = value;
    filterTable(appointments, nameFilter, statusFilter);
  });
});
