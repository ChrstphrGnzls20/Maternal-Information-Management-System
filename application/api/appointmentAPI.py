# models
from ..models.Mdl_appointment import Appointment

from flask import Blueprint, request, make_response, jsonify
import json

# instantiate model
appointmentObj = Appointment()

appointmentAPI = Blueprint('appointmentAPI', __name__)


# @appointmentAPI.route("/<string:entity>/<string:userID>/<string:appointmentID>", methods=["GET"])
@appointmentAPI.route("/<string:entity>/<string:userID>", methods=["GET"])
def getAppointments(entity: str, userID: str):
    # IF USER IS NOT PATIENT NOR DOCTOR, THROWS A 401(UNAUTHORIZED) HTTP ERROR
    filters: dict = {}
    if entity not in ["patient", "doctor"]:
        return make_response(jsonify([]), 401)
    filterKey: str = f"{entity}_id"
    filters[filterKey] = userID

    # GET NEEDED ARGS
    appointmentID = request.args.get("search_id", None)
    appointmentDate = request.args.get('appointmentDate', None)
    limit = int(request.args.get("limit", 0))
    pageNumber = int(request.args.get("page", 0))
    sortKey = request.args.get("sortKey", None)
    sortDir = int(request.args.get("sortDirection", 1))  # ASCENDING IN DEFAULT

    # CHECK IF STATUS IS SPECIFIED
    status = request.args.get("status", None)
    if status:
        statusArray = status.split("|")
        if len(statusArray) > 1:
            filters['$or'] = [{"status": statusArray[0]},
                              {"status": statusArray[1]}]
        else:
            filters['status'] = status

    # CHECK IF SORT IS VALID
    validSort = (sortKey, sortDir) if sortKey in ['_id', 'appointmentDate', 'createdDate',
                                                  'doctor_id', 'doctor_name', 'patient_id', 'patient_name', 'status'] else None

    # FOR RETRIEVING ALL APPOINTMENTS THAT BELONGS TO A SPECIFIC USER
    if request.method == "GET":
        if not appointmentID:
            # IF THERE IS A VALID SORT IN THE SEARCH PARAMS
            if validSort:
                return make_response(appointmentObj.retrieveAppointments(filter=filters, limit=limit, pageNumber=pageNumber, sort=validSort), 201)

            elif appointmentDate:
                filters['appointmentDate'] = {"$regex": appointmentDate}

            return make_response(appointmentObj.retrieveAppointments(filter=filters, limit=limit, pageNumber=pageNumber), 201)


        return make_response(appointmentObj.retrieveAppointments(filter=filters))
        # FOR RETRIEVING SPECIFIC APPOINTMENT THAT BELONGS TO A SPECIFIC USER
        return make_response(appointmentObj.retrieveAppointments(filter={filterKey: userID, "_id": appointmentID}), 201)
    


@appointmentAPI.route("/", methods=["POST"])
def addAppointment():
    '''
        EXPECTS AND RETURNS A DICTIONARY OF SERVICE INFORMATION INSERTED
        FORMAT:
        {
            _id: autogenerated, 
            doctor_id: value,
            patient_id: value,
            date: value,
            time: value,
            createdDate: value,
        }
    '''
    if request.method == "POST":
        data = json.loads(request.data)
        result = appointmentObj.addAppointment(data)
        print(result)
        if result:
            return make_response(jsonify(result))

# TODO: CANCEL APPOINTMENT

# @appointmentAPI.route("/<string:appointmentID>/cancel", methods=["PATCH"])


@appointmentAPI.route("/<string:appointmentID>", methods=["PATCH"])
def editAppointment(appointmentID: str):
    if request.method == "PATCH":
        data = json.loads(request.data)
        validActions = ["canceled", "accepted", "rejected"]
        if data['status'] in validActions:
            result = appointmentObj.editAppointment(
                appointmentID=appointmentID, payload=data)
            if result:
                return make_response(jsonify(result), 201)
            return make_response(jsonify(result), 404)
        # THROW A 401(UNAUTHORIZED) ERROR IF THE ACTION IS NOT VALID
        return make_response({}, 401)
